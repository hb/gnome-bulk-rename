#!@PYTHON@
#
# GNOME bulk rename utility
# Copyright (C) 2010-2012 Holger Berndt <hb@gnome.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA


import sys
from argparse import ArgumentParser
import logging
import logging.handlers
import os
import os.path

import locale
import gettext

from gi.repository import Gtk
from gi.repository import Gdk

LIBDIR = '@LIBDIR@'

def _get_root_dir():
    return '/'.join(os.path.dirname(os.path.abspath(__file__)).split('/')[:-1])

def _in_devel():
    return os.path.exists(os.path.join(_get_root_dir(), '.git'))

def main(argv=None):
    if _in_devel():
        root = _get_root_dir()
        localedir = os.path.join(root, 'po')
    else:
        root = os.path.join(LIBDIR, 'gnome-bulk-rename', 'python')
        localedir = "@DATADIR@/locale"

    root = os.path.join(root, "gnome-bulk-rename")
    # add gnome-bulk-rename path to python path
    if not root in sys.path:
        sys.path.insert(0, root)

    # i18n
    try:
        locale.setlocale(locale.LC_ALL, '')
        locale.bindtextdomain('gnome-bulk-rename', localedir)
        locale.textdomain('gnome-bulk-rename')
    except:
        print("Couldn't set locale, reverting to C locale")
    gettext.install('@GETTEXT_PACKAGE@', localedir)

    import config
    import register

    # set binary
    config.exec_script_filepath = os.path.realpath(__file__)
     
    # argument parsing
    if argv is None:
        argv = sys.argv

    parser = ArgumentParser(description=_("Bulk rename tool for GNOME"))
    parser.add_argument("--version", action="version", version="%(prog)s "+config.version)
    
    # optional arguments
    parser.add_argument("-s", "--simple", action="store_true")
    parser.add_argument("--register", action="store_true", help=_("Don't start the application, just register with file managers"))
    parser.add_argument("-r", "--recursive", action="store_true", help=_("Add files and folders of command line URIs recursively"), default=False)
    parser.add_argument("--log-level", help=_("Log level: One of 'debug', 'info', 'warning', 'error', 'critical'"), default="WARNING")
    parser.add_argument("--print-resources", action="store_true", help=_("Print locations of resources on the filesystem, and exit"))
    
    # positional arguments
    parser.add_argument("uri", nargs="*")
    
    args = parser.parse_args(args=argv[1:])

    if args.print_resources:
        import collect
        print(_("Search folders for additional preview functionality:\n {0}").format(collect.get_user_extension_folder("preview")))
        print()
        print(_("Search folders for additional markup functionality:\n {0}").format(collect.get_user_extension_folder("markup")))
        print()
        print(_("Search folders for additional sort functionality:\n {0}").format(collect.get_user_extension_folder("sort")))
        return 0

    # logging
    logdir = os.path.join(config.config_dir, "log")
    if not os.path.isdir(logdir):
        os.makedirs(logdir)
    logfilename = config.appname
    if args.simple:
        logfilename += "-simple"
    logfile =  os.path.join(logdir, logfilename + ".log")
    logger = logging.getLogger("gnome.bulk-rename")
    handler = logging.handlers.TimedRotatingFileHandler(logfile, 'D', 7, 4)
    formatter = logging.Formatter("%(asctime)s %(name)s [%(levelname)s]: %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    try:
        logger.setLevel(args.log_level.upper())
    except ValueError:
        logger.setLevel(logging.WARNING)
        logger.warning("Not a valid log level: {0}".format(args.log_level))

    # start the application
    if args.register:
        register.startup_check_file_managers(logger)
    else:
        from gnomebulkrenameapp import GnomeBulkRenameApp, GnomeBulkRenameAppSimple
        
        if args.simple:
            app = GnomeBulkRenameAppSimple(args.recursive, args.uri)
        else:
            app = GnomeBulkRenameApp(args.recursive, args.uri)
        Gtk.main()

if __name__ == "__main__":
    sys.exit(main())
